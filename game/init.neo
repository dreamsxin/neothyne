const Vec2 = require("scripts/math/Vec2.neo");

let a: Vec2 = new Vec2 { x = 0.1; y = 0.2; };
let b: Vec2 = new Vec2 { x = -0.1; y = -0.2; };
let c: Vec2 = a + b; // { 0., 0. }
let d: Vec2 = a - b; // { 0.2, 0.4 }
let e: Vec2 = d * 2; // { 0.4, 0.8 }
print(c.x, ", ", c.y, "\n");
print(d.x, ", ", d.y, "\n");
print(e.x, ", ", e.y, "\n");

fn sierpinski(n: Int) {
  for (let y: Int = n - 1; y >= 0; y--) {
    for (let i = 0; i < y; i++)
      print(" ");
    for (let x: Int = 0; x + y < n; x++)
      if (x & y) print("  "); else print("* ");
    print("\n");
  }
}

sierpinski(16);
sierpinski(32);
sierpinski(64);
sierpinski(128);

fn hofstadter_conway(m: Int) {
  let k1: Int = 2;
  let lg2: Int = 1;
  let amax: Float = 0.0;
  let list: Array = [ -50000, 1, 1 ].resize(0x100000 + 1);
  let v: Int = list[2];
  for (let n: Int = 3; n <= m; n++) {
    list[n] = list[v] + list[n-v];
    v = list[n];
    if (amax < v*1.0/n) amax = v*1.0/n;
    if (0 == (k1&n)) {
      print("Maximum between 2^", lg2, " and 2^", lg2+1, " was ", amax, "\n");
      amax = 0.0;
      lg2++;
    }
    k1 = n;
  }
}

hofstadter_conway(0x100000);

fn ackermann(m: Int, n: Int) {
  if (m == 0) return n + 1;
  if (n == 0) return ackermann(m - 1, 1);
  return ackermann(m - 1, ackermann(m, n - 1));
}

for (let m: Int = 0; m <= 5; m++)
  for (let n: Int = 0; n < 5 - m; n++)
    print("A(", m, ", ", n, ") = ", ackermann(m, n), "\n");
