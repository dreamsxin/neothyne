include include.mk

# Change this to -m64 for Windows 64
MACHINE ?= -m32

# Change this to pe-x86-64 for Windows 64
RESFLAGS := -F pe-i386

# Resource compiler
RES := windres

# When building on a Linux system
SYS := $(shell $(CC) -dumpmachine)
ifneq (, $(findstring linux, $(SYS)))
	ifeq ($(MACHINE),-m32)
		CC = i686-w64-mingw32-gcc
		RES = i686-w64-mingw32-windres
		RESFLAGS = -F pe-i386
	else
		CC = x86_64-w64-mingw32-gcc
		RES = x86_64-w64-mingw32-windres
		RESFLAGS = -F pe-x86-64
	endif
endif

CXX = $(CC)
CXXFLAGS = \
	-std=c++11 \
	-Wall \
	-Wextra \
	-Wno-format \
	-ffast-math \
	-fno-exceptions \
	-fno-rtti \
	-I. \
	-DDEBUG_GL \
	-O3 \
	$(MACHINE) \
	-fno-omit-frame-pointer

ENGINE_CXXFLAGS = \
	$(CXXFLAGS) \
	`sdl2-config --cflags`

ENGINE_LDFLAGS = \
	$(MACHINE) \
	-lm \
	-lSDL2

resources.o:
	$(RES) $(RESFLAGS) neothyne.rc resources.o

$(GAME_BIN): resources.o $(GAME_OBJECTS)
	$(CXX) resources.o $(GAME_OBJECTS) $(ENGINE_LDFLAGS) -o $@

.cpp.o:
	$(CXX) -MD -c $(ENGINE_CXXFLAGS) $< -o $@
	@cp $*.d $*.P; \
		sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
			-e '/^$$/ d' -e 's/$$/ :/' < $*.d >> $*.P; \
		rm -f $*.d

clean:
	rm -f $(GAME_OBJECTS) $(GAME_OBJECTS:.o=.P)
	rm -f $(GAME_BIN)
	rm -f resources.o

-include *.P
